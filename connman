#!/bin/bash
#
# Connection ManagerScript  - embeddedpi.com
#
# Release : 14/10/2024  RAW IP VERSION
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
#
# dms = modem device details
# nas = cellular network details
# wds = cellular data connection details
#

# Select whether to do end to end check over network
DoEndToEndCheck=true
#DoEndToEndCheck=false

#LOG=true # If enabling make sure a log rotate process is enabled
LOG=false 
QUIET=false # minimal output
LOG_FILE="/var/log/connman.log"
PID_FILE="/var/run/modem-monitor.pid"

# Give a standard SIM a few mins to register on the network before hassling it. 
# SIMs which roam by default like Hologram, WhereverSIM etc need much longer on first powerup
STARTUP_DELAY="2m" 

# This sets how often the monitor function 
CheckInternal="30m" # 30 min check period

# Function to log messages
function log_message() 
{
    local message="$1"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    if [ "$QUIET" = false ]; then
        echo "$timestamp - ConnMan: $message"
    fi    
    if [ "$LOG" = true ]; then
        echo "$timestamp - $message" >> "$LOG_FILE"
    fi
}

# Function: stop_wwan0
# Description: Brings down the wwan0 interface and terminates the associated udhcpc process
# Parameters: None
# Returns: None
function stop_wwan0() 
{
    log_message "Stopping wwan0 interface"
    
    # Terminate udhcpc process for wwan0
    udhcpc_pid=$(pgrep -f "udhcpc -i wwan0")
    if [ -n "$udhcpc_pid" ]; then
        log_message "Terminating udhcpc process for wwan0 (PID: $udhcpc_pid)"
        kill -15 $udhcpc_pid
        sleep 2  # Give it a moment to terminate gracefully
    fi
    
    # Bring down the interface
    ifconfig wwan0 down
    log_message "wwan0 interface stopped"
}


# Function: check_dependencies
# Description: Checks for the existence of key commands and interfaces
# Parameters: None
# Returns: Exits with error if any dependency is missing
function check_dependencies() 
{
    local missing_dependencies=()

    # Check for required commands
    local required_commands=(
        "/usr/local/bin/modemstat"
        "/usr/local/bin/softresetmodem.sh"
        "/usr/local/bin/qmi-network-raw"
    )

    for cmd in "${required_commands[@]}"; do
        if [ ! -x "$cmd" ]; then
            missing_dependencies+=("$cmd")
        fi
    done

    # Check for required interfaces
    if [ ! -c "/dev/modemAT" ]; then
        missing_dependencies+=("Serial port: /dev/modemAT - check for modem rules in /etc/udev/rules.d")
    fi

    if [ ! -c "/dev/cdc-wdm0" ]; then
        missing_dependencies+=("QMI interface: /dev/cdc-wdm0")
    fi

    # If any dependencies are missing, log the errors and exit
    if [ ${#missing_dependencies[@]} -ne 0 ]; then
        log_message "Error: The following required components are missing:"
        for dep in "${missing_dependencies[@]}"; do
            log_message "  - $dep"
        done
        log_message "Please ensure all required components are installed and configured correctly."
        exit 1
    fi

    #log_message "All required components are present."
}


# Function: init
# Description: Initializes the modem by bringing down network interfaces and stopping the QMI network.
# Parameters: None
# Returns: 0 on success
function init
{
    # Start from a clean slate
    stop_wwan0
    if ip link show wwan1 &> /dev/null; then
        ifconfig wwan1 down
    fi
    qmi-network-raw /dev/cdc-wdm0 stop >/dev/null
    return 0
}

# Function: checkRegState
# Description: Checks the registration state of the modem and waits for it to register on the network.
# Parameters: None
# Returns: 0 if registered successfully, 1 if failed to register
function checkRegState
{



    # Get details from modem using modemstat
    #MODEMVENDOR=QUECTEL
    #IMEI=867624063556764
    #SIM=89441000304824727446
    #SIMSTATUS=READY
    #SIGNAL=21
    #REGMODE=AUTOMATIC
    #NETWORKID='vodafone UK'
    #REGSTATE=REGISTERED-HOME
    #MODEMMODE='EDGE'
    #MODEMBAND='GSM 900'

    source <(/usr/local/bin/modemstat -q)

    if [ "$SIGNAL" == "" ]
    then
        echo "No valid signal obtained, check modemstat can be run"
        log_message "No valid signal obtained, check modemstat can be run"
        exit 1 
    fi

    # let's verify that we are registered on cellular the network before we proceed
    while true
    do

        if (( $SIGNAL >= 10 ))
        then
            log_message "Signal strength - $SIGNAL/32"
        fi

        if (( $SIGNAL <= 10  && $SIGNAL > 5 ))
        then
            log_message "Signal strength low, re-orient or upgrade antenna  - $SIGNAL/32"
                
        fi

        if (( $SIGNAL <= 5 ))
        then
            log_message "Signal strength very low, expect problems obtaining a connection, re-orient or upgrade antenna  - $SIGNAL/32"
        fi

        if (( $SIGNAL == 99 ))
        then
            log_message "No signal detected - Check antenna pigtail & antenna. "
        fi

        
        if [ "$REGSTATE" == "REGISTERED-HOME" ] || [ "$REGSTATE" == "REGISTERED-ROAMING" ]
        then
            log_message "Registered OK on network : $REGSTATE"
            log_message "Network ID : $NETWORKID  Mode : $MODEMMODE / $MODEMBAND"
            return 0
        fi

        if [ "$REGSTATE" == "NOT-REGISTERED" ] || [ "$REGSTATE" == "DENIED" ]
        then
            log_message "Failed to register on network"
            # we're in "Not Registered, Not searching" or "Registration denied" state
            # hard reset the modem and try again
            log_message "Resetting Modem..."
            /usr/local/bin/softresetmodem.sh
            log_message "Giving modem 20 seconds to register..."
            sleep 20
            return 1
        fi
        if [ "$REGSTATE" == "SEARCHING" ] || [ "$REGSTATE" == "DENIED" ] 
        then
            log_message "Searching for network..."
            # We're still waiting for the modem to connect to the network
            sleep 10
            return 1
        fi
            
    done
}

# Function: checkSimPin
# Description: Checks if a SIM PIN is required and attempts to unlock the SIM if necessary.
# Parameters: None
# Returns: 0 if SIM is unlocked or no PIN is required, 1 if PIN unlock fails
function checkSimPin
{
    # Check for SIM PIN details
    if [ -e /etc/sim.conf ]
    then
        . /etc/sim.conf
        if [ "$SIMPIN" != "" ]
        then
            log_message "PIN Unlock Running"
            qmicli -d /dev/cdc-wdm0 --dms-uim-verify-pin=PIN,$SIMPIN
            simRetCode=$?
            if (( $simRetCode != 0 ))
            then
                log_message "PIN Unlock FAILED "
                return 1
            fi
            log_message "PIN Unlock OK"
        fi
    fi

    return 0
}

# Function: networkConnect
# Description: Attempts to connect to the cellular network.
# Parameters: None
# Returns: 0 if connected successfully, 1 if connection fails after multiple attempts
function networkConnect
{
    # At this point we're registered on the network so make an attempt to get connected
    for attempt in {1..3}
    do              
        log_message "Connecting To Cellular Network"
        /usr/local/bin/qmi-network-raw /dev/cdc-wdm0 start             
        sleep 5
        # check for "[/dev/cdc-wdm0] Connection status: 'disconnected'" which would indicate failed connection attempt
        if ! qmicli -d /dev/cdc-wdm0 --wds-get-packet-service-status | grep -q "disconnected"
        then
            log_message "Modem Connected OK"
            ifconfig wwan0 up
            udhcpc -i wwan0
            return 0
        fi
        # Failed to connect, reset interfaces and have another go
        log_message "Modem Connect FAILED ($attempt/3)"
        stop_wwan0            
        qmi-network-raw  /dev/cdc-wdm0 stop >/dev/null
    done
    
    # If we've had three failed attempts to connect then softreset the modem
    log_message "Resetting Modem..."
    # This will attempt a soft-reset via AT+CFUN=1,1 first, if it can't connect to the modem 
    /usr/local/bin/softresetmodem.sh                      
    return 1
}

# Function: networkDisconnect
# Description: Attempts to disconnect from the cellular network.
# Parameters: None
# Returns: 0 if disconnected successfully, 1 if disconnection fails after multiple attempts
function networkDisconnect
{        
    # Disconnect from cellular network, try three times to do this before resetting an unresponsive modem.
    for attempt in {1..3}
    do      
        log_message "Disconnecting From Cellular Network"       
        /usr/local/bin/qmi-network-raw /dev/cdc-wdm0 stop               
        sleep 5
        if qmicli -d /dev/cdc-wdm0 --wds-get-packet-service-status | grep -q "disconnected"
        then
            log_message "Modem Disconnected OK"
            stop_wwan0
            return 0
        fi
        # Failed to disconnect, log and try again
        log_message "Modem Disconnect FAILED ($attempt/3)"
    done
    
    # If we've had three failed attempts to disconnect then reset the modem
    stop_wwan0
    log_message "Resetting Modem..."
    # this will try to soft-reset first then use the hardware line if it can't
    /usr/local/bin/softresetmodem.sh                      
    # Run qmi-network-raw so we clean up any stale files
    /usr/local/bin/qmi-network-raw /dev/cdc-wdm0 stop >/dev/null
    return 1
}

# Function: monitorConnection
# Description: Monitors the state of the cellular connection and performs periodic checks.
# Parameters: None
# Returns: 1 if connection is lost and needs to be restarted, otherwise continues monitoring
function monitorConnection
{
    # Delay first so if there's any issue with configuration  give some time for any updates to download
    # Balance availability with data usage to check connection.
    sleep $CheckInternal
    # Keep an eye on the state of the cellular connection
    while true
    do        
        # No Byte Check #1 - Do we show as disconnected at the cellular level?
        if qmicli -d /dev/cdc-wdm0 --wds-get-packet-service-status | grep -q "disconnected"
        then
            log_message "Connection disconnected, restarting..."
            # We've disconnected for some reason
            stop_wwan0
            qmi-network-raw /dev/cdc-wdm0 stop
            return 1 # exit back to start and re-connect
        fi

        # No Byte Check #2 - Do we show as disconnected at the network operator level?
        if qmicli -d /dev/cdc-wdm0 --nas-get-serving-system | grep -q "not-registered"
        then
            # We've disconnected for some reason
            log_message "Network disconnected, restarting..."
            stop_wwan0
            qmi-network-raw /dev/cdc-wdm0 stop
            return 1 # exit back to start and re-connect
        fi

        # We often find long standing cellular internet connections appear connected but get "muted" by the base station so 
        # need refreshing periodically. The best way to validate your connection is to do a remote http check to a known server.
        #
        # This check uses cellular data so there's a balance to be had with maintaining connection uptime vs cost.     
        #            
        if [ "$DoEndToEndCheck" = true ]; then
            max_attempts=3
            # This is the standard MS Windows network connectivity check server,
            # ideally should be YOUR server.
            websiteToCheck="http://www.msftncsi.com/ncsi.txt"

            for ((attempt=1; attempt<=max_attempts; attempt++))
            do
                log_message "Running End-to-end transaction check (attempt $attempt/$max_attempts)"
                
                # This is robust... 
                # curl -I -s --connect-timeout 5 --max-time 10 $websiteToCheck | grep "HTTP/1.1 200 OK"
                # ...but This uses less network bytes :
                wget -q --spider --timeout=5 --tries=1 --dns-timeout=5 $websiteToCheck
                returnCode=$?
                
                if (( $returnCode == 0 )); then
                    log_message "End-to-end check successful"
                    break
                elif (( $attempt < max_attempts )); then
                    log_message "Check failed. Trying again in 10 seconds..."
                    sleep 10
                else
                    log_message "All attempts failed. Can't communicate with remote server, restarting..."
                    return 1
                fi
            done
        fi

        log_message "Network check AOK"
                        
    done
}

###############################################################################
#
#  MAIN Functions
#
###############################################################################


# Function to import settings from /etc/sim.conf
function import_settings() 
{
    if [ -f "/etc/sim.conf" ]; then
        if [ -r "/etc/sim.conf" ]; then
            source "/etc/sim.conf"
            log_message "Settings imported from /etc/sim.conf"
        else
            log_message "Error: /etc/sim.conf exists but is not readable"
        fi
    else
        log_message "No /etc/sim.conf file found, using default settings"
    fi
}

# Function: firststart
# Description: Add a delay before attempting to startup the modem communications as SIMs often take a 
#              a few mins to survey and register on networks at inital power up.
# Parameters: None
# Returns: transfers to 'start' function
function firststart() 
{
    # Give a standard SIM a few mins to register on the network before hassling it. 
    # SIMs which roam by default like Hologram, WhereverSIM etc need much longer on first powerup

    log_message "Performing first start procedure..."
    import_settings    
    log_message "Waiting for $STARTUP_DELAY to allow SIM to detect networks..."
    sleep $STARTUP_DELAY    
    start
}

# Function: is_modem_connected
# Description: Checks if the modem shows as connected 
# Parameters: None
# Returns: 0 if connected, 1 if not connected
function is_modem_connected() 
{
    if ! qmicli -d /dev/cdc-wdm0 --wds-get-packet-service-status | grep -q "disconnected"
    then
        return 0  # Connected
    else
        return 1  # Disconnected
    fi
}

# Function: start
# Description: Checks the modem network registration state and PIN status, then starts the modem connection 
# Parameters: None
# Returns: 0 on success, 1 on failure
function start() 
{
    if is_modem_connected; then
        log_message "Modem connection is already active."
        return
    fi
    init
    checkRegState
    if [ $? -eq 0 ]; then
        checkSimPin
        if [ $? -eq 0 ]; then
            networkConnect
            if [ $? -eq 0 ]; then
                log_message "Modem connection started successfully."
            else
                log_message "Failed to connect to the network."
                return 1
            fi
        else
            log_message "SIM PIN unlock failed."
            return 1
        fi
    else
        log_message "Could not connect to cellular network"
        return 1
    fi
}




# Function: stop
# Description: Stops the modem connection and the monitor process.
# Parameters: None
# Returns: 0 on success, 1 on failure
function stop() 
{
    stop_monitor
    networkDisconnect
    if [ $? -eq 0 ]; then
        log_message "Modem connection stopped successfully."
    else
        log_message "Failed to disconnect modem."
        return 1
    fi
}

# Function: start_monitor
# Description: Starts the monitoring process for the modem connection.
# Parameters: None
# Returns: None
function start_monitor() 
{
    if is_monitor_running; then
        log_message "Monitor is already running."
        return
    fi
    $0 runmonitor & 
    local pid=$!
    sleep 1
    if ps -p $pid > /dev/null 2>&1; then
        echo $pid > "$PID_FILE"
        log_message "Monitor process spawned succssfully PID $pid"
    else
        log_message "Failed to start monitor process"
        exit 1
    fi
}

# Function: stop_monitor
# Description: Stops the monitoring process for the modem connection.
# Parameters: None
# Returns: None
function stop_monitor() 
{
    if [ -f "$PID_FILE" ]; then
        pid=$(cat "$PID_FILE")
        kill $pid
        rm "$PID_FILE"
        log_message "Monitor process stopped."
    else
        log_message "Monitor is not running."
    fi
}

# Function: is_monitor_running
# Description: Checks if the monitor process is currently running.
# Parameters: None
# Returns: 0 if running, 1 if not running
function is_monitor_running() 
{
    if [ -f "$PID_FILE" ]; then
        pid=$(cat "$PID_FILE")
        if ps -p $pid > /dev/null 2>&1; then
            return 0  # Running
        fi
    fi
    return 1  # Not running
}

# Function: run_monitor
# Description: Runs the main monitoring loop for the modem connection.
# Parameters: None
# Returns: None
function run_monitor() 
{
    sleep 3 
    while true; do 
    # infinite loop
        monitorConnection
        # if we exit the above function the cellular network is confirmed down
        # so restart it then go back into main monitor function
        if [ $? -ne 0 ]; then
            log_message "Connection lost. Attempting to reconnect..."
            networkDisconnect
            sleep 10  # Wait 10 seconds before attempting to reconnect
            start
        fi    
    done
}

# Function: status
# Description: Displays the current status of the modem connection and monitor process.
# Parameters: None
# Returns: None
function status() 
{
    echo -en "Modem status:"
    if is_modem_connected; then
        echo "  Connected"
    else
        echo "  Disconnected"
    fi
    
    echo "Network information:"
    qmicli -d /dev/cdc-wdm0  --nas-get-serving-system 
    
    if is_monitor_running; then
        echo "Monitor is running. PID: $(cat $PID_FILE)"
    else
        echo "Monitor is not running."
    fi    
}

# Function: restart
# Description: Restarts the modem connection by stopping and then starting it.
# Parameters: None
# Returns: None
function restart() 
{
    stop_monitor
    stop
    start
}

# Main script logic
if [ "$(id -u)" != "0" ]; then
   echo "This script must be run as root" 1>&2
   exit 1
fi

# Check for required dependencies
check_dependencies

case "$1" in
    first-start)
        firststart
    ;;
    start)
        start
        ;;
    stop)
        stop
        ;;
    restart)
        restart
        ;;
    status)
        status
        ;;
    start-monitor)
        start_monitor
        ;;
    stop-monitor)
        stop_monitor
        ;;
    runmonitor)
    run_monitor
    ;;
    *)
        echo "ConnManager v1.0"
        echo "Usage: $0 {first-start|start|stop|restart|status|start-monitor|stop-monitor}"
        exit 1
        ;;
esac

exit 0